// Code generated by MockGen. DO NOT EDIT.
// Source: timetable.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/hamillka/team25/backend/internal/models"
)

// MockTimetableRepository is a mock of TimetableRepository interface.
type MockTimetableRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTimetableRepositoryMockRecorder
}

// MockTimetableRepositoryMockRecorder is the mock recorder for MockTimetableRepository.
type MockTimetableRepositoryMockRecorder struct {
	mock *MockTimetableRepository
}

// NewMockTimetableRepository creates a new mock instance.
func NewMockTimetableRepository(ctrl *gomock.Controller) *MockTimetableRepository {
	mock := &MockTimetableRepository{ctrl: ctrl}
	mock.recorder = &MockTimetableRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimetableRepository) EXPECT() *MockTimetableRepositoryMockRecorder {
	return m.recorder
}

// GetDoctorsByLocation mocks base method.
func (m *MockTimetableRepository) GetDoctorsByLocation(id int64) ([]models.Doctor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDoctorsByLocation", id)
	ret0, _ := ret[0].([]models.Doctor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDoctorsByLocation indicates an expected call of GetDoctorsByLocation.
func (mr *MockTimetableRepositoryMockRecorder) GetDoctorsByLocation(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDoctorsByLocation", reflect.TypeOf((*MockTimetableRepository)(nil).GetDoctorsByLocation), id)
}

// GetLocationsByDoctor mocks base method.
func (m *MockTimetableRepository) GetLocationsByDoctor(id int64) ([]models.Office, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocationsByDoctor", id)
	ret0, _ := ret[0].([]models.Office)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocationsByDoctor indicates an expected call of GetLocationsByDoctor.
func (mr *MockTimetableRepositoryMockRecorder) GetLocationsByDoctor(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocationsByDoctor", reflect.TypeOf((*MockTimetableRepository)(nil).GetLocationsByDoctor), id)
}

// GetWorkdaysByDoctor mocks base method.
func (m *MockTimetableRepository) GetWorkdaysByDoctor(id int64) ([]*models.Timetable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkdaysByDoctor", id)
	ret0, _ := ret[0].([]*models.Timetable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkdaysByDoctor indicates an expected call of GetWorkdaysByDoctor.
func (mr *MockTimetableRepositoryMockRecorder) GetWorkdaysByDoctor(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkdaysByDoctor", reflect.TypeOf((*MockTimetableRepository)(nil).GetWorkdaysByDoctor), id)
}
