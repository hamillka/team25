// Code generated by MockGen. DO NOT EDIT.
// Source: patient.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/hamillka/team25/backend/internal/models"
)

// MockPatientRepository is a mock of PatientRepository interface.
type MockPatientRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPatientRepositoryMockRecorder
}

// MockPatientRepositoryMockRecorder is the mock recorder for MockPatientRepository.
type MockPatientRepositoryMockRecorder struct {
	mock *MockPatientRepository
}

// NewMockPatientRepository creates a new mock instance.
func NewMockPatientRepository(ctrl *gomock.Controller) *MockPatientRepository {
	mock := &MockPatientRepository{ctrl: ctrl}
	mock.recorder = &MockPatientRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPatientRepository) EXPECT() *MockPatientRepositoryMockRecorder {
	return m.recorder
}

// AddPatient mocks base method.
func (m *MockPatientRepository) AddPatient(fio, phoneNumber, email, insurance string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPatient", fio, phoneNumber, email, insurance)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPatient indicates an expected call of AddPatient.
func (mr *MockPatientRepositoryMockRecorder) AddPatient(fio, phoneNumber, email, insurance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPatient", reflect.TypeOf((*MockPatientRepository)(nil).AddPatient), fio, phoneNumber, email, insurance)
}

// EditPatient mocks base method.
func (m *MockPatientRepository) EditPatient(id int64, fio, phoneNumber, email, insurance string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditPatient", id, fio, phoneNumber, email, insurance)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditPatient indicates an expected call of EditPatient.
func (mr *MockPatientRepositoryMockRecorder) EditPatient(id, fio, phoneNumber, email, insurance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditPatient", reflect.TypeOf((*MockPatientRepository)(nil).EditPatient), id, fio, phoneNumber, email, insurance)
}

// GetAllPatients mocks base method.
func (m *MockPatientRepository) GetAllPatients() ([]models.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPatients")
	ret0, _ := ret[0].([]models.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPatients indicates an expected call of GetAllPatients.
func (mr *MockPatientRepositoryMockRecorder) GetAllPatients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPatients", reflect.TypeOf((*MockPatientRepository)(nil).GetAllPatients))
}

// GetPatientByID mocks base method.
func (m *MockPatientRepository) GetPatientByID(id int64) (models.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPatientByID", id)
	ret0, _ := ret[0].(models.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPatientByID indicates an expected call of GetPatientByID.
func (mr *MockPatientRepositoryMockRecorder) GetPatientByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPatientByID", reflect.TypeOf((*MockPatientRepository)(nil).GetPatientByID), id)
}
